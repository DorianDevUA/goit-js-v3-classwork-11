// TODO: –¶—ñ–∫–∞–≤—ñ –∑–∞–¥–∞—á—ñ –∑ –∫—É—Ä—Å—É –≤–∏–≤—á–µ–Ω–Ω—è JavaScript.

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è if...else_if...else
// =============================================
// –î–µ–¥–ª–∞–π–Ω –∑–¥–∞—á—ñ –ø—Ä–æ–µ–∫—Ç—É.
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É –¥–µ–¥–ª–∞–π–Ω—É –∑–¥–∞—á—ñ –ø—Ä–æ–µ–∫—Ç—É.
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é if...else.
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 0 –¥–Ω—ñ–≤ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–°—å–æ–≥–æ–¥–Ω—ñ"
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 1 –¥–µ–Ω—å - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–ó–∞–≤—Ç—Ä–∞"
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 2 –¥–Ω—ñ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞"
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 3+ –¥–Ω—ñ–≤ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–î–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É"

// const daysUntilDeadline = 2;

// if (daysUntilDeadline >= 3) {
//   console.log('–î–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É');
// } else if (daysUntilDeadline === 2) {
//   console.log('–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞');
// } else if (daysUntilDeadline === 1) {
//   console.log('–ó–∞–≤—Ç—Ä–∞');
// } else {
//   console.log('–°—å–æ–≥–æ–¥–Ω—ñ');
// }

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è switch...case...default
// =============================================
// –î–µ–¥–ª–∞–π–Ω –∑–¥–∞—á—ñ –ø—Ä–æ–µ–∫—Ç—É.
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–∞—Å—É –¥–µ–¥–ª–∞–π–Ω—É –∑–¥–∞—á—ñ –ø—Ä–æ–µ–∫—Ç—É.
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π switch.
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 0 –¥–Ω—ñ–≤ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–°—å–æ–≥–æ–¥–Ω—ñ"
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 1 –¥–µ–Ω—å - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–ó–∞–≤—Ç—Ä–∞"
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 2 –¥–Ω—ñ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞"
// –Ø–∫—â–æ –¥–æ –¥–µ–¥–ª–∞–π–Ω—É 3+ –¥–Ω—ñ–≤ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–î–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É"
// –Ø–∫—â–æ –¥–µ–¥–ª–∞–π–Ω —Å–ø–ª–∏–Ω—É–≤ - –≤–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "–î—Ä—É–∂–µ, —Ç–∏ –ø—Ä–æ—Å–ø–∞–≤!"

// const daysUntilDeadline = -2;

// if (daysUntilDeadline >= 0) {
//   switch (daysUntilDeadline) {
//     case 0:
//       console.log('–°—å–æ–≥–æ–¥–Ω—ñ');
//       break;
//     case 1:
//       console.log('–ó–∞–≤—Ç—Ä–∞');
//       break;
//     case 2:
//       console.log('–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞');
//       break;
//     default:
//       console.log('–î–∞—Ç–∞ —É –º–∞–π–±—É—Ç–Ω—å–æ–º—É');
//   }
// } else {
//   console.log('–î—Ä—É–∂–µ, —Ç–∏ –ø—Ä–æ—Å–ø–∞–≤!');
// }

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–π —Ç–∞ —Ü–∏–∫–ª—É while
// =============================================
// –ó–∞–ø–∏—Ç –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
// –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —á–∏—Å–ª–æ, —â–æ –≤–≤—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–±–æ null.
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–∏–∫–ª while –¥–ª—è –∑–∞–ø–∏—Ç—É —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ prompt(), –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞.
// –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤—ñ–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è:
// –í–∏–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ç–µ, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ, —Ç–∞ –∑–Ω–æ–≤—É –∑–∞–ø–∏—Ç—É–µ—Ç—å—Å—è —á–∏—Å–ª–æ
// –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "–°–∫–∞—Å—É–≤–∞—Ç–∏":
// –í–∏–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è null.
// –Ø–∫—â–æ –≤–≤–µ–¥–µ–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, —Ü–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ: –ø–æ–≤–µ—Ä—Ç–∞–µ—Ç—å—Å—è –≤–≤–µ–¥–µ–Ω–µ —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω—è.

// const getNumericValue = message => {
//   while (true) {
//     const inputValue = prompt(message);
//     const isValidValue =
//       !isNaN(inputValue) && inputValue !== '' && inputValue !== null;

//     if (isValidValue) {
//       return Number(inputValue);
//     }

//     if (inputValue === null) {
//       alert('–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É.');
//       console.error('–°–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º');
//       return null;
//     }

//     alert('–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ.');
//   }
// };

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for
// =============================================
// –ù–∞–ø–∏—à–∏ —Ü–∏–∫–ª for, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
// —á–∏—Å–ª–∞ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –≤—ñ–¥ min –¥–æ max,
// –∞–ª–µ —Ç—ñ–ª—å–∫–∏, —è–∫—â–æ —á–∏—Å–ª–æ –∫—Ä–∞—Ç–Ω–µ 5.

// const max = 100;
// const min = 20;

// for (let i = min; i <= max; i += 1) {
//   if (!(i % 5)) {
//     console.log(i);
//   }
// }

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for
// =============================================
// –ù–∞–ø–∏—à–∏ —Ü–∏–∫–ª for, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞
// —á–∏—Å–ª–∞ –∑–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º –≤—ñ–¥ min –¥–æ max,
// –∞–ª–µ —Ç—ñ–ª—å–∫–∏, —è–∫—â–æ —á–∏—Å–ª–æ –∫—Ä–∞—Ç–Ω–µ 5.

// const max = 100;
// const min = 20;

// for (let i = min; i <= max; i += 1) {
//   if (!(i % 5)) {
//     console.log(i);
//   }
// }

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for
// =============================================
// –ü–µ—Ä–µ–±—ñ—Ä –º–∞—Å–∏–≤—É
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤—É fruits —Ü–∏–∫–ª–æ–º for.
// –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å–∏–≤—É –≤–∏–≤–µ–¥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä—è–¥–æ–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ:
// "–Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞" - "–∑–Ω–∞—á–µ–Ω–Ω—è_–µ–ª–µ–º–µ–Ω—Ç–∞"
// –ù—É–º–µ—Ä–∞—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ 1.

// const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];

// // for (let i = 0; i < fruits.length; i += 1) {
// //   console.log(`${i + 1} - ${fruits[i]}`);
// // }

// for (let i = 0, n = 1; i < fruits.length; i += 1, n += 1) {
//   console.log(`${n} - ${fruits[i]}`);
// }

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for —Ç–∞ –º–µ—Ç–æ–¥—É split
// =============================================
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏–π –Ω–æ–º–µ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
// –£ –∑–º—ñ–Ω–Ω–∏—Ö names —Ç–∞ phones –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Ä—è–¥–∫–∏ —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤, —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
// –ü–æ—Ä—è–¥–∫–æ–≤–∏–π –Ω–æ–º–µ—Ä —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É —Ä—è–¥–∫–∞—Ö –≤–∫–∞–∑—É—é—Ç—å –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å.
// –ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω —Ç–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.

// let names = 'Jacob,William,Solomon,Artem';
// let phones = '89001234567,890055566377,890077832554';
// names = names.split(',');
// phones = phones.split(',');

// for (let i = 0; i < names.length, i < phones.length; i += 1) {
//   console.log(`${names[i]} - ${phones[i]}`);
// }

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for (–±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω—ñ –º–∞—Å–∏–≤–∏)
// =============================================
// –ü–µ—Ä–µ–±—ñ—Ä –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–æ–≥–æ –º–∞—Å–∏–≤—É —Ç–∞ –≤–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å –∫–æ–∂–Ω–æ–≥–æ –π–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞

// const array = [1, 'Hello', null, true, [1, [NaN, Infinity], 3, 4]];

// for (let i = 0; i < array.length; i += 1) {
//   const item = array[i];
//   const isArray = Array.isArray(item);

//   if (isArray) {
//     for (let j = 0; j < item.length; j += 1) {
//       const subItem = item[j];
//       const isArray = Array.isArray(subItem);

//       if (isArray) {
//         for (let z = 0; z < subItem.length; z += 1) {
//           console.log('subItem z:', subItem[z]);
//         }
//         continue;
//       }
//       console.log('item j:', subItem);
//     }
//     continue;
//   }
//   console.log('arr i:', item);
// }

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for (–±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω—ñ –º–∞—Å–∏–≤–∏)
// 1. –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ü–∏–∫–ª–æ–º
// 2. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—É: sort()
// =============================================
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Ä—è–¥–∫—ñ–≤ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –∑–∞ –ø–µ—Ä—à–æ—é –ª—ñ—Ç–µ—Ä–æ—é –µ–ª–µ–º–µ–Ω—Ç–∞.

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby'];
// ['c++', 'haskel', 'javascript', 'php', 'python', 'ruby']

// –ú–µ—Ç–æ–¥ –±—É–ª—å–±–∞—à–∫–∞
// https://www.youtube.com/watch?v=-_0dD2shabQ
// http://xn--80adth0aefm3i.xn--j1amh/%D0%BF%D1%83%D0%B1%D0%BB%D1%96%D0%BA%D0%B0%D1%86%D1%96%D1%8F/21
// for (let i = 0; i < langs.length; i++) {
//   for (let j = 0; j < langs.length; j++) {
//     if (langs[j] > langs[j + 1]) {
//       const item = langs[j];
//       langs[j] = langs[j + 1];
//       langs[j + 1] = item;
//     }
//     console.log(langs);
//   }
// }
// console.log(langs);

// –°—É—á–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–º–µ—Ç–æ–¥ sort())
// langs.sort((a, b) => a.localeCompare(b));
// console.log(langs);

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for...of —Ç–∞ —Ç–µ—Ä–Ω–∞—Ä–Ω–æ–≥–æ –≤–∏—Ä–∞–∑—É
// =============================================
// –ó–º—ñ–Ω–∏ —Ä–µ–≥—ñ—Å—Ç—Ä –∫–æ–∂–Ω–æ—ó –ª—ñ—Ç–µ—Ä–∏ —É —Ä—è–¥–∫—É –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥: —è–∫—â–æ —Ä—è–¥–æ–∫ "JavaScript" —Ç–æ –Ω–∞ –≤–∏—Ö–æ–¥—ñ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —Ä—è–¥–æ–∫ "jAVAsCRIPT".

// const string = 'JavaScript Is AweSOME!';
// let invertedString = '';

// for (const leter of string) {
//   const isInLowerCase = leter === leter.toLowerCase();
//   // if (isInLowerCase) {
//   //   console.log(`Find small: ${leter}`);
//   //   invertedString += leter.toUpperCase();
//   // } else {
//   //   invertedString += leter.toLowerCase();
//   // }
//   invertedString += isInLowerCase ? leter.toUpperCase() : leter.toLowerCase();
// }

// console.log('String:', string);
// console.log('Inverted String:', invertedString);

// ============== Example ======================
// –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü–∏–∫–ª—É for...of
// =============================================
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ —É –º–∞—Å–∏–≤—ñ.
// –ö–æ–¥ –ø–æ–≤–∏–Ω–µ–Ω –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å - —è–∫–æ–≥–æ –º–∞—Å–∏–≤—É —á–∏—Å–µ–ª.
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏–∫–ª for...of –¥–ª—è —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –∑–∞–¥–∞—á—ñ.

// const numbers = [94, 2, 17, 94, 1, 23, 37];
// let min = numbers[0]; // –†–æ–±–∏–º–æ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è, —â–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ - —Ü–µ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É.

// for (const value of numbers) {
//     if (value < min) {
//         min = value;
//     }
// }

// console.log(min); // 1

// ============== Example ======================
// –ú–∞—Å–∏–≤–∏ —Ç–∞ —Ä—è–¥–∫–∏
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–µ—Ç–æ–¥—ñ–≤: split(), reverse(), join()
// =============================================
// –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç, —è–∫–∏–π ¬´—Ä–æ–∑–≥–æ—Ä—Ç–∞—î¬ª —Ä—è–¥–æ–∫ (–∑–≤–æ—Ä–æ—Ç–Ω–∏–π –ø–æ—Ä—è–¥–æ–∫ –±—É–∫–≤) —ñ –≤–∏–≤–æ–¥–∏—Ç—å –π–æ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª—å.

// const string = 'Welcome to the future';
// const result = string.split('').reverse().join('');
// console.log(result);

// ============== Example ======================
// –§—É–Ω–∫—Ü—ñ—ó, –ø—Å–µ–≤–¥–æ–º–∞—Å–∏–≤ arguments, –æ–ø–µ—Ä–∞—Ü—ñ—è rest —Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä spread
// =============================================
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –¥–æ–≤—ñ–ª—å–Ω–æ—ó –∫-—Å—Ç—ñ —á–∏—Å–µ–ª.

// // const add = function () {
// //   console.log(arguments);
// //   const args = Array.from(arguments); // const args = [...arguments]; // spread (—Ä–æ–∑–ø–∏–ª—é—î–º–æ –º–∞—Å–∏–≤)
// //   let total = 0;

// //   for (const arg of args) {
// //     total += arg;
// //   }

// //   return total;
// // };

// const add = function (...args) { // rest (–∑–±–∏—Ä–∞–µ–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —É –º–∞—Å–∏–≤)
//   console.log(args);
//   let total = 0;

//   for (const arg of args) {
//     total += arg;
//   }

//   return total;
// };

// console.log(add(1, 2, 3));
// console.log(add(120, 777, 323, 80));

// ============== Example ======================
// –§—É–Ω–∫—Ü—ñ—ó, –æ–ø–µ—Ä–∞—Ü—ñ—è rest
// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è —É –º–∞—Å–∏–≤
// =============================================
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é filterNumbers(array [, number1, ...]) —è–∫–∞:
// - –ø–µ—Ä—à–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –ø—Ä–∏–π–º–∞—î –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª,
// - –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É, –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—ñ–ª—å–Ω–∞ –∫-—Å—Ç—å —ñ–Ω—à–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤, —è–∫—ñ –±—É–¥—É—Ç—å —á–∏—Å–ª–∞–º–∏.
// –§—É–Ω–∫—Ü—ñ—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤,
// —É —è–∫–æ–º—É –±—É–¥—É—Ç—å —Ç—ñ–ª—å–∫–∏ —Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç–∏, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ –¥—Ä—É–≥–æ–≥–æ,
// –¥–ª—è —è–∫–∏—Ö —î –∞–Ω–∞–ª–æ–≥ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É –º–∞—Å–∏–≤—ñ.

// const filterNumbers = function (array, ...args) {
//   console.log('array: ', array);
//   console.log('args: ', args);
//   const duplicateEl = [];

//   for (const element of array) {
//     if (args.includes(element)) {
//       duplicateEl.push(element);

//       console.log(`–ï–ª–µ–º–µ–Ω—Ç: ${element} —î —É –º–∞—Å–∏–≤—ñ!`);
//     }
//   }

//   return duplicateEl;
// };

// console.log(filterNumbers([1, 2, 3, 4, 5], 10, 15, 2, 3, 8)); // [2, 3]
// console.log(filterNumbers([10, 15, 25, 30], 23, 30, 18, 15)); // [30, 15]
// console.log(filterNumbers([100, 200, 300, 400, 500], 7, 12, 200, 64)); // [200]

// ============ Example*(—Ä–µ–∫—É—Ä—Å—ñ—è) =============
// –§—É–Ω–∫—Ü—ñ—ó, arguments, spread, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
// –ü–æ—à—É–∫ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞
// =============================================
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é findLargestNumber(numbers) —è–∫–∞ —à—É–∫–∞—î –Ω–∞–π–±—ñ–ª—å—à–µ —á–∏—Å–ª–æ –∑ —á–∏—Å–µ–ª –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –≤ —è–∫–æ—Å—Ç—ñ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤.

// –ü—Ä–æ—Å—Ç–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç (–ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è –ª–∏—à–µ —á–∏—Å–ª–∞)
// function findLargestNumber(...arr) {
//   console.log(arr);
//   // // // const arr = Array.from(arguments)
//   // // const arr = [...arguments];
//   let max = arr[0];

//   for (const num of arr) {
//     if (num > max) {
//       max = num;
//     }
//   }

//   return max;
// }

// console.log(findLargestNumber(2, 17, 94, 1, 23, 37)); // 94
// console.log(findLargestNumber(49, 4, 7, 83, 12)); // 83

// –ó–∞–≤–¥–∞–Ω–Ω—è –∑ –∂–∏—Ä–Ω–æ—é –∑—ñ—Ä–æ—á–∫–æ—é
// —Ä–µ–∫—É—Ä—Å—ñ—è (–≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —ñ–Ω—à—ñ –º–∞—Å–∏–≤–∏)
// function findLargestNumber() {
//   let max;

//   for (const num of arguments) {
//     if (typeof num === 'number') {
//       max = num;
//       break;
//     }
//   }

//   for (const num of arguments) {
//     if (typeof num === 'number') {
//       if (num > max) {
//         max = num;
//       }
//     } else {
//       // [[1, 143], 5, 7] => [1, 143], 5, 7
//       max = findLargestNumber(...num);
//       // //[1, 143] => 1, 143
//       // max = findLargestNumber(...num); // 143
//     }
//   }

//   return max;
// }

// console.log(findLargestNumber([[1, 143], 5, 7], 6, 7, 899, 88, 123));

// ============ Example*(—Ä–µ–∫—É—Ä—Å—ñ—è) =============
// –§—É–Ω–∫—Ü—ñ—ó, arguments, spread, —Ä–µ–∫—É—Ä—Å—ñ—è
// ================================================
// –ü–µ—Ä–µ–±—ñ—Ä –±–∞–≥–∞—Ç–æ–≤–∏–º—ñ—Ä–Ω–æ–≥–æ –º–∞—Å–∏–≤—É —Ç–∞ –≤–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å –∫–æ–∂–Ω–æ–≥–æ –π–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∞

// const array = [1, 'Hello', true, [1, [NaN, Infinity], 3, 4]];

// function showEachArgument() {
//   for (const element of arguments) {
//     const isArray = Array.isArray(element);

//     if (isArray) {
//       showEachArgument(...element);
//     } else {
//       console.log(element);
//     }
//   }
// }

// showEachArgument(array);

// // for (let i = 0; i < array.length; i += 1) {
// //   const item = array[i];
// //   const isArray = Array.isArray(item);

// //   if (isArray) {
// //     for (let j = 0; j < item.length; j += 1) {
// //       const subItem = item[j];
// //       const isArray = Array.isArray(subItem);

// //       if (isArray) {
// //         for (let z = 0; z < subItem.length; z += 1) {
// //           console.log('subItem z:', subItem[z]);
// //         }
// //         continue;
// //       }
// //       console.log('item j:', subItem);
// //     }
// //     continue;
// //   }
// //   console.log('arr i:', item);
// // }

// =====================================
// === –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó id ========
// =====================================
// function createUniqueID() {
//   return `${Date.now().toString(36)}-${Math.random().toString(36).slice(2)}`;
// }

/*
 * =============== Shopping Cart ================
 * –†–∞–±–æ—Ç–µ–º —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:
 * - getItems()
 * - add(product)
 * - remove(productName)
 * - clear()
 * - countTotalPrice()
 * - increaseQuantity(productName)
 * - decreaseQuantity(productName)
 *
 * { name: 'üçé', price: 50 }
 * { name: 'üçá', price: 70 }
 * { name: 'üçã', price: 60 }
 * { name: 'üçì', price: 110 }
 */

// const cart = {
//   items: [],
//   getItems() {},
//   add(product) {},
//   remove(productName) {},
//   clear() {},
//   countTotalPrice() {},
//   increaseQuantity(productName) {},
//   decreaseQuantity(productName) {},
// };

//? –†–æ–∑–≤'—è–∑–æ–∫
// const cart = {
//   items: [],

//   getItems() {
//     return this.items;
//   },

//   add(product) {
//     const { items } = this;

//     for (const item of items) {
//       if (item.name === product.name) {
//         item.quantity += 1;
//         return;
//       }
//     }

//     const newProduct = {
//       ...product,
//       quantity: 1,
//       id: crypto.randomUUID(),
//     };

//     items.push(newProduct);
//   },

//   remove(productName) {
//     const { items } = this;

//     for (let i = 0; i < items.length; i += 1) {
//       const { name } = items[i];

//       if (productName === name) {
//         items.splice(i, 1);
//       }
//     }
//   },

//   clear() {
//     this.items = [];
//   },

//   countTotalPrice() {
//     const { items } = this;
//     let total = 0;

//     for (const { quantity, price } of items) {
//       total += quantity * price;
//     }

//     return total;
//   },

//   increaseQuantity(productName) {
//     const { items } = this;

//     for (const item of items) {
//       if (item.name === productName) {
//         item.quantity += 1;
//       }
//     }
//   },

//   decreaseQuantity(productName) {
//     const { items } = this;

//     for (const item of items) {
//       if (item.name === productName && item.quantity <= 1) {
//         this.remove(productName);
//       } else if (item.name === productName) {
//         item.quantity -= 1;
//       }
//     }
//   },
// };

// cart.add({ name: 'üçé', price: 50 });
// cart.add({ name: 'üçá', price: 60 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçã', price: 60 });
// cart.add({ name: 'üçì', price: 110 });

// cart.remove('üçé');

/*
 * –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
 */

// // const rgb = [255, 100, 80];
// // const [red, green, blue] = rgb;
// // console.log(red, green, blue); // 255, 100, 80

// const authors = {
//   kiwi: 4,
//   poly: 7,
//   ajax: 9,
//   mango: 6,
// };

// const entries = Object.entries(authors);
// console.log(entries);
// // —É—Ä3
// for (const [name, rating] of entries) {
//   // —É—Ä2
//   // const [name, rating] = entry;
//   // —É—Ä1
//   // const name = entry[0];
//   // const rating = entry[1];

//   console.log(name, rating);
// }

/*
 * –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –æ–±'—î–∫—Ç–∞
 * - –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
 * - –Ü–º'—è –∑–º—ñ–Ω–Ω–æ—ó –≤—ñ–¥–º—ñ–Ω–Ω–µ –≤—ñ–¥ —ñ–º–µ–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
 */

// const playlist = {
//   name: '–ú–æ–π —Å—É–ø–µ—Ä –ø–ª–µ–π–ª–∏—Å—Ç',
//   rating: 5,
//   tracks: ['—Ç—Ä–µ–∫-1', '—Ç—Ä–µ–∫-2', '—Ç—Ä–µ–∫-3'],
//   trackCount: 3,
// };

// const { rating, tracks, name, trackCount: numberOfTracks = 0, author = 'user' } = playlist;

// console.log(numberOfTracks);

/*
 * –ì–ª—É–±–æ–∫–∞ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è
 */

// const profile = {
//   name: 'Jacques Gluke',
//   tag: 'jgluke',
//   location: 'Ocho Rios, Jamaica',
//   avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//   stats: {
//     followers: 5603,
//     views: 4827,
//     likes: 1308,
//   },
// };

// const {
//   avatar,
//   name,
//   tag,
//   location,
//   stats: { followers, views, likes },
// } = profile;

// console.log(name, tag, location, avatar, followers, views, likes);

/*
 * –ü–∞—Ç—Ç–µ—Ä–Ω ¬´–û–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å¬ª
 * - –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞-–æ–±'—î–∫—Ç–∞ –≤ –ø—ñ–¥–ø–∏—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
 * - rest –ø—Ä–∏ –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó –≤ –ø—ñ–¥–ø–∏—Å—ñ
 */

// const showProfileInfo = function (userProfile) {
//   const { name, tag, location, ...restProps } = userProfile;

//   // console.log(name, tag, location, avatar, followers, views, likes);
//   console.log(restProps);
// };

// const profile = {
//   name: 'Jacques Gluke',
//   tag: 'jgluke',
//   location: 'Ocho Rios, Jamaica',
//   avatar: 'https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg',
//   stats: {
//     followers: 5603,
//     views: 4827,
//     likes: 1308,
//   },
// };

// showProfileInfo(profile);
